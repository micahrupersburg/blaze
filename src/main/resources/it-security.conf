input {
 kafka {
   codec=> dcr
   topic=> "dcr.traffic"
 }
}

filter {
  if [type] == "sshd" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{SSHD_AUTH_BADUSER}",
        "message", "%{SSHD_AUTH}",
        "message", "%{CUST_SSHD_AUTH_MULTI_FAIL2}",
        "message", "%{CUST_SSHD_AUTH_MULTI_FAIL}"

      ]
    }
    mutate {
      add_field => { "product" => "sshd" }
    }
  }

  else if [type] == "cust-sshd"{
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{CUST_SSHD_AUTH_MULTI_FAIL2}",
        "message", "%{CUST_SSHD_AUTH_MULTI_FAIL}"
      ]
    }
    mutate {
      add_field => { "product" => "cust-sshd" }
    }
  }

  else if [type] == "ids" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [ "message", "%{IDS}" ]
    }
    mutate {
      add_field => { "product" => "ids" }
    }
  }

  else if [type] == "unknownexe" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{UNKNOWNEXE}",
        "message", "%{UNKNOWNEXE_HB}",
        "message", "%{UNKNOWNEXE_ER}"
      ]
    }
    mutate {
      add_field => { "product" => "unknownexe" }
    }
  }

  else if [type] == "windows-security-json" {
    date {
      match => ["EventTime", "YYY-MM-dd HH:mm:ss"]
    }
    mutate {
      rename => [ "AccountName", "user" ]
      rename => [ "AccountType", "[eventlog][account_type]" ]
      rename => [ "ActivityId", "[eventlog][activity_id]" ]
      rename => [ "Address", "ip6" ]
      rename => [ "ApplicationPath", "[eventlog][application_path]" ]
      rename => [ "AuthenticationPackageName", "[eventlog][authentication_package_name]" ]
      rename => [ "Category", "[eventlog][category]" ]
      rename => [ "Channel", "[eventlog][channel]" ]
      rename => [ "Domain", "domain" ]
      rename => [ "EventID", "[eventlog][event_id]" ]
      rename => [ "EventType", "[action]" ]
      rename => [ "File", "[eventlog][file_path]" ]
      rename => [ "Guid", "[eventlog][guid]" ]
      rename => [ "Hostname", "hostname" ]
      rename => [ "Interface", "[eventlog][interface]" ]
      rename => [ "InterfaceGuid", "[eventlog][interface_guid]" ]
      rename => [ "InterfaceName", "[eventlog][interface_name]" ]
      rename => [ "IpAddress", "src_address" ]
      rename => [ "IpPort", "port" ]
      rename => [ "Key", "[eventlog][key]" ]
      rename => [ "LogonGuid", "[eventlog][logon_guid]" ]
      rename => [ "Message", "message" ]
      rename => [ "ModifyingUser", "[eventlog][modifying_user]" ]
      rename => [ "NewProfile", "[eventlog][new_profile]" ]
      rename => [ "OldProfile", "[eventlog][old_profile]" ]
      rename => [ "Port", "port" ]
      rename => [ "PrivilegeList", "[eventlog][privilege_list]" ]
      rename => [ "ProcessID", "pid" ]
      rename => [ "ProcessName", "[eventlog][process_name]" ]
      rename => [ "ProviderGuid", "[eventlog][provider_guid]" ]
      rename => [ "ReasonCode", "[eventlog][reason_code]" ]
      rename => [ "RecordNumber", "[eventlog][record_number]" ]
      rename => [ "ScenarioId", "[eventlog][scenario_id]" ]
      rename => [ "Severity", "level" ]
      rename => [ "SeverityValue", "[eventlog][severity_code]" ]
      rename => [ "SourceModuleName", "nxlog_input" ]
      rename => [ "SourceName", "[eventlog][program]" ]
      rename => [ "SubjectDomainName", "[eventlog][subject_domain_name]" ]
      rename => [ "SubjectLogonId", "[eventlog][subject_logonid]" ]
      rename => [ "SubjectUserName", "[eventlog][subject_user_name]" ]
      rename => [ "SubjectUserSid", "[eventlog][subject_user_sid]" ]
      rename => [ "System", "[eventlog][system]" ]
      rename => [ "TargetDomainName", "[eventlog][target_domain_name]" ]
      rename => [ "TargetLogonId", "[eventlog][target_logonid]" ]
      rename => [ "TargetUserName", "[user_id]" ]
      rename => [ "TargetUserSid", "[eventlog][target_user_sid]" ]
      rename => [ "ThreadID", "thread" ]
    }
    mutate {
      add_field => { "product" => "windowsevents" }
      remove_field => [
        "CurrentOrNextState",
        "Description",
        "EventReceivedTime",
        "EventTime",
        "EventTimeWritten",
        "IPVersion",
        "KeyLength",
        "Keywords",
        "LmPackageName",
        "LogonProcessName",
        "LogonType",
        "Name",
        "Opcode",
        "OpcodeValue",
        "PolicyProcessingMode",
        "Protocol",
        "ProtocolType",
        "SourceModuleType",
        "State",
        "Task",
        "TransmittedServices",
        "Type",
        "UserID",
        "Version"
      ]
    }
  }

  else if [type] == "tippingpoint" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [ "message", "%{TIPPING_POINT}" ]
    }
    mutate {
      add_field => { "product" => "tippingpoint" }
    }
  }

  else if [type] == "cust_ftpd" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{PURE_FTP_ACTION}",
        "message", "%{PURE_FTP_FAIL}",
        "message", "%{PURE_FTP_SUCCESS}"
      ]
    }
    mutate {
      add_field => { "product" => "cust-ftpd" }
    }
  }
  else if [type] == "sbeapp" {
    date {
      match => ["timestamp", "yyyy MMM dd HH:mm:ss"]
      locale => "en"
    }
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{MYA_LOGINS_STRANGE}" ,
        "message", "%{MYA_LOGINS}"
      ]
    }
    mutate {
      add_field => { "product" => "sbeapp" }
    }
  }

  else if [type] == "vpn" {
    grok {
      patterns_dir => "/etc/logstash/grok/patterns/infosec_patterns.conf"
      match => [
        "message", "%{VPN_DISCO}",
        "message", "%{VPN_CONN}"
      ]
    }
    mutate {
      add_field => { "product" => "vpn" }
    }
  }

  else {
    drop {}
  }

  if ! [hit_count] {
  mutate {
    add_field => {
      "hit_count" => 1
    }
  }
}
mutate {
  convert => ["hit_count", "integer"]
  add_field => {
    "storageType" => "logs"
    "property" => "infosec"
  }
}
if [src_address] !~ "-" {
  geoip {
    database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
    source => "src_address"
  }
  #geoip {
  #   database => "/opt/logstash/vendor/geoip/GeoIPASNum.dat"
  #   source => "src_address"
  #}
}
}





output {
    if "drop" not in [tags] and "_grokparsefailure" not in [tags] {
        if [type] != "tippingpoint" and [type] != "cust_ftpd" {
            elasticsearch {
                cluster => "infosec_search"
                host => "10.22.252.58"
                protocol => "transport"
                index => "infosec-%{+YYYY.MM.dd}"
            }
        }
        http {
            codec => "json"
            http_method => "post"
            url => "http://localhost:12285/v1/dc/logs/%{property}/%{product}"
        }
        elasticsearch {
            cluster => "search-as-a-service"
            host => "p3plsearch010.prod.phx3.gdg"
            protocol => "transport"
            index => "infosec-%{+YYYY.MM.dd}"
        }

    }
}

