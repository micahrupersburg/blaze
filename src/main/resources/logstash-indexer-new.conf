input {
  file {
    type => "syslog"
    # modify to path to suit your local syslog configuration.
    # The below will recursively grab all files in /var/log/rsyslog that end in .log
    path => ["/var/log/syslog/*/*/*/*/*.log"]
    # comment out below after logstash has slurped in all of your existing logs otherwise
    # you risk it double indexing if you lose your sincedb file.
    start_position => "beginning"
    codec => plain { charset => "ISO-8859-1" }
  }
}
filter {
  grok {
    patterns_dir=>"./grok-patterns"

    #pure-ftpd matching:
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(%{USERNAME:ftp_username}@%{IP:ftp_remote_host}\)%{SPACE}\[NOTICE\]%{SPACE}%{PATH:ftp_file}%{SPACE}%{WORD:ftp_remote_action}%{SPACE}\(%{DATA:ftp_filesize},%{SPACE}%{DATA:ftp_transferspeed}\)"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(.*%{IP:ftp_remote_host}\).*Authentication failed for user \[%{USERNAME:ftp_username}\]"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(%{USERNAME:ftp_username}@%{IP:ftp_remote_host}\).*"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(?@%{IP:ftp_remote_host}\).*\[user\]%{SPACE}\[%{USER:ftp_username}\].*"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(?@%{IP:ftp_remote_host}\).*%{SPACE}"]

    #customer-sshd matching:
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*Failed password for .* user %{USERNAME:sshd_username} from %{IP:sshd_remote_ip} port %{INT:sshd_remote_port}"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.* Invalid user %{USERNAME:sshd_username} from %{IP:sshd_remote_ip}"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*disconnect%{SPACE}from%{SPACE}%{IP:sshd_remote_ip}.*"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*%{SPACE}Accepted%{SPACE}password%{SPACE}for%{SPACE}%{USERNAME:sshd_username}%{SPACE}from%{SPACE}%{IP:sshd_remote_ip}.*"]
    match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.* Did not receive identification string from %{IP:sshd_remote_ip}.*"]
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*reverse mapping checking getaddrinfo.*\[%{IP:sshd_remote_ip}.*\]"]

    #check_runaways matching:
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*check_runaways\[.*\]:%{SPACE}%{USERNAME:checkrunaways_user}.*kill%{SPACE}\[.*\]%{SPACE}\[%{DATA:checkrunaways_app}\]%{SPACE}ran%{SPACE}\[%{DATA:checkrunanways_processruntime}\].*"]

    #vhost_limit matching:
    match => ["message","%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}%{SPACE}vhost_limit\[.*\]:%{SPACE},%{SPACE}%{URIHOST},%{SPACE}%{URIHOST:vhostlimit_domain},%{SPACE}%{NUMBER},%{SPACE}%{NUMBER:vhostlimit_inboundconnections},%{SPACE}%{PATH:vhostlimit_path}"]

    #bash_history matching:
    match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*USER=%{USERNAME:bashhistory_username} UID=%{INT:bashhistory_uid} CMD=\"%{GREEDYDATA:bashhistory_command}\""]

    #cronchroot matching:
    match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:logsource}.*\(%{USERNAME:cronchroot_username}\) CMD \(%{GREEDYDATA:cronchroot_command}\)"]

    match => [ "message","%{SYSLOGLINE}"]
  }
  mutate {
    remove_field => ["SYSLOGLINE", "SECOND", "MINUTE", "HOUR", "MONTH","MONTHDAY", "IPORHOST", "host", "@version", "path", "type", "pid", "program", "tags"]
  }
}

output {
  elasticsearch {
    # Uncomment below if you wish syslog messages to have their own ES index.
    # index => "logstash-syslog-%{+YYYY.MM.dd}"
  }
}
